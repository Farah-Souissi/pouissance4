import gymnasium as gym
from gymnasium import spaces
import numpy as np

class ConnectFourEnv(gym.Env):  # gym.Env from gymnasium
    def __init__(self):
        super().__init__()
        self.board = np.zeros((6, 7), dtype=np.int8)
        self.action_space = spaces.Discrete(7)
        self.observation_space = spaces.Box(low=0, high=2, shape=(6, 7), dtype=np.int8)
        self.current_player = 1

    def reset(self, *, seed=None, options=None):
        self.board = np.zeros((6, 7), dtype=np.int8)
        self.current_player = 1
        return self.board, {}

    def step(self, action):
        if self.board[0, action] != 0:
            return self.board, -10, True, False, {}
        for row in range(5, -1, -1):
            if self.board[row, action] == 0:
                self.board[row, action] = self.current_player
                break
        if self.check_win(self.current_player):
            return self.board, 10, True, False, {}
        if np.all(self.board != 0):
            return self.board, 0, True, False, {}
        self.current_player = 3 - self.current_player
        return self.board, 0, False, False, {}

    def render(self):
        print(np.flip(self.board, 0))

    def check_win(self, player):
        for c in range(7 - 3):
            for r in range(6):
                if np.all(self.board[r, c:c+4] == player):
                    return True
        for r in range(6 - 3):
            for c in range(7):
                if np.all(self.board[r:r+4, c] == player):
                    return True
        for r in range(6 - 3):
            for c in range(7 - 3):
                if all(self.board[r+i, c+i] == player for i in range(4)):
                    return True
        for r in range(3, 6):
            for c in range(7 - 3):
                if all(self.board[r-i, c+i] == player for i in range(4)):
                    return True
        return False
